{"version":3,"sources":["Components/Searchbar/SearchBar.jsx","Components/ImageGalleryItem/ImageGalleryItem.jsx","Components/ImageGallery/ImageGallery.jsx","Components/Button/Button.jsx","Components/Modal/Modal.jsx","App.js","Api/FetchService.jsx","index.js"],"names":["Searchbar","className","onSubmit","event","props","type","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","onClick","e","modalFn","target","attributes","value","console","log","src","this","imageLink","alt","imageAlt","largeImageURL","defaultProps","ImageGallery","loader","imagesArray","map","id","webformatURL","tags","imagAlt","propTypes","array","Button","fn","modalRoot","document","querySelector","Modal","closeFn","children","handleKeyDown","code","useEffect","window","addEventListener","removeEventListener","createPortal","currentTarget","App","useState","searchWords","setSearchWords","images","setImages","showModal","setModal","modalImage","setModalItem","showLoader","setShowLoader","currentPage","setCurrentPage","toggleModal","loaderToggle","bool","getImages","words","page","axios","get","API","then","response","imagesFromResponse","data","hits","prevState","finally","scrollTo","top","documentElement","scrollHeight","behavior","preventDefault","searchWordsValue","reset","linkImg","setModalImage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.567bb1ac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass Searchbar extends Component {\r\n  static propTypes = { onSubmit: propTypes.func };\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form\r\n          className=\"SearchForm\"\r\n          onSubmit={(event) => this.props.onSubmit(event)}\r\n        >\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;\r\n","import React, { Component } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass ImageGalleryItem extends Component {\r\n  static defaultProps = { imageLink: \" \", imageAlt: \" \" };\r\n\r\n  static propTypes = {\r\n    imageLink: propTypes.string,\r\n    imageAlt: propTypes.string,\r\n    largeImageURL: propTypes.string,\r\n    modalFn: propTypes.func,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li className=\"ImageGalleryItem\">\r\n        <img\r\n          onClick={(e) => {\r\n            this.props.modalFn(e.target.attributes[2].value);\r\n            console.log(e);\r\n          }}\r\n          src={this.props.imageLink}\r\n          alt={this.props.imageAlt}\r\n          data-large={this.props.largeImageURL}\r\n          className=\"ImageGalleryItem-image\"\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageGalleryItem;\r\n","import React, { Component } from \"react\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\r\nimport propTypes from \"prop-types\";\r\nclass ImageGallery extends Component {\r\n  static defaultProps = { imagesArray: propTypes.array };\r\n  static propTypes = {\r\n    loader: propTypes.func,\r\n    imagesArray: propTypes.array,\r\n    modalFn: propTypes.func,\r\n  };\r\n  componentDidMount() {\r\n    this.props.loader(true);\r\n  }\r\n  render() {\r\n    return (\r\n      <ul className=\"ImageGallery\">\r\n        {this.props.imagesArray.map(\r\n          ({ id, webformatURL, tags, largeImageURL }) => {\r\n            return (\r\n              <ImageGalleryItem\r\n                key={id}\r\n                imageLink={webformatURL}\r\n                imagAlt={tags}\r\n                largeImageURL={largeImageURL}\r\n                modalFn={this.props.modalFn}\r\n              />\r\n            );\r\n          }\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nexport default ImageGallery;\r\n","import React, { Component } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass Button extends Component {\r\n  static propTypes = { fn: propTypes.func };\r\n\r\n  render() {\r\n    return (\r\n      <button className=\"Button\" type=\"button\" onClick={() => this.props.fn()}>\r\n        Load more\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nexport default function Modal({ closeFn, children }) {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  });\r\n  function handleKeyDown(event) {\r\n    if (event.code === \"Escape\") {\r\n      closeFn();\r\n    }\r\n  }\r\n  function handleBackdrop(event) {\r\n    if (event.currentTarget === event.target) {\r\n      closeFn();\r\n    }\r\n  }\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handleBackdrop}>\r\n      <div className=\"Modal\">{children}</div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n}\r\nModal.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nModal.propTypes = {\r\n  children: propTypes.node,\r\n  closeFn: propTypes.func.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport * as API from \"./Api/FetchService\";\r\nimport Searchbar from \"./Components/Searchbar\";\r\nimport ImageGallery from \"./Components//ImageGallery/ImageGallery\";\r\nimport Button from \"./Components/Button\";\r\nimport Modal from \"./Components/Modal\";\r\nexport default function App() {\r\n  const [searchWords, setSearchWords] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [showModal, setModal] = useState(false);\r\n  const [modalImage, setModalItem] = useState(\"\");\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const toggleModal = () => {\r\n    setModal(!showModal);\r\n  };\r\n  const setModalImage = (linkImg) => {\r\n    return setModalItem(linkImg);\r\n  };\r\n  const openLargeImage = (linkImg) => {\r\n    setModalImage(linkImg);\r\n    toggleModal();\r\n  };\r\n  const loaderToggle = (bool) => {\r\n    return setShowLoader(bool);\r\n  };\r\n  const getImages = (words, page) => {\r\n    loaderToggle(true);\r\n    API.get(words, page)\r\n      .then((response) => {\r\n        loaderToggle(false);\r\n        const imagesFromResponse = response.data.hits;\r\n        setImages((prevState) => [...prevState, ...imagesFromResponse]);\r\n        setCurrentPage((prevState) => prevState + 1);\r\n      })\r\n      .finally(() => {\r\n        if (currentPage > 1) {\r\n          window.scrollTo({\r\n            top: document.documentElement.scrollHeight,\r\n            behavior: \"smooth\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n  const searchFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    setImages([]);\r\n    const searchWordsValue = event.target[1].value;\r\n    setSearchWords(searchWordsValue);\r\n    const page = 1;\r\n    getImages(searchWordsValue, page);\r\n    event.target.reset();\r\n  };\r\n  const loadMoreFn = () => {\r\n    loaderToggle(true);\r\n    getImages(searchWords, currentPage);\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      {showModal && (\r\n        <Modal closeFn={toggleModal} loader={loaderToggle}>\r\n          <img src={modalImage} alt=\"modal\" />\r\n        </Modal>\r\n      )}\r\n      <Searchbar onSubmit={searchFormSubmit} />\r\n      {searchWords !== \"\" && (\r\n        <ImageGallery\r\n          loader={loaderToggle}\r\n          imagesArray={images}\r\n          modalFn={openLargeImage}\r\n        ></ImageGallery>\r\n      )}\r\n      {showLoader && <Loader />}\r\n      {searchWords !== \"\" && <Button fn={loadMoreFn} />}\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst API_BASIC_URL = \"https://pixabay.com/api/\";\r\nconst API_KEY = \"22486349-475ac57b79bf68bd3ecb1002b\";\r\nconst TYPE = \"photo\";\r\nconst ORIENTATION = \"horizontal\";\r\nconst PERPAGE = 12;\r\n\r\nexport const get = (words, page) => {\r\n  return axios.get(\r\n    `${API_BASIC_URL}?key=${API_KEY}&q=${words}&image_type=${TYPE}&page=${page}&orientation=${ORIENTATION}&per_page=${PERPAGE}`\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../src/styles.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}