{"version":3,"sources":["Components/Searchbar/SearchBar.jsx","Components/ImageGalleryItem/ImageGalleryItem.jsx","Components/ImageGallery/ImageGallery.jsx","Components/Button/Button.jsx","Components/Modal/Modal.jsx","App.js","Api/FetchService.jsx","index.js"],"names":["Searchbar","className","onSubmit","event","props","type","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","onClick","e","modalFn","target","attributes","value","console","log","src","this","imageLink","alt","imageAlt","largeImageURL","defaultProps","ImageGallery","loader","imagesArray","map","id","webformatURL","tags","imagAlt","propTypes","array","Button","fn","modalRoot","document","querySelector","Modal","handleKeyDown","code","closeFn","handleBackdrop","currentTarget","window","addEventListener","removeEventListener","createPortal","children","App","useState","searchWords","setSearchWords","images","setImages","showModal","setModal","modalImage","setModalItem","showLoader","setShowLoader","currentPage","setCurrentPage","toggleModal","loaderToggle","bool","getImages","words","page","axios","get","API","then","response","imagesFromResponse","data","hits","prevState","finally","scrollTo","top","documentElement","scrollHeight","behavior","preventDefault","searchWordsValue","reset","linkImg","setModalImage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.344927e8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass Searchbar extends Component {\r\n  static propTypes = { onSubmit: propTypes.func };\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form\r\n          className=\"SearchForm\"\r\n          onSubmit={(event) => this.props.onSubmit(event)}\r\n        >\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;\r\n","import React, { Component } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass ImageGalleryItem extends Component {\r\n  static defaultProps = { imageLink: \" \", imageAlt: \" \" };\r\n\r\n  static propTypes = {\r\n    imageLink: propTypes.string,\r\n    imageAlt: propTypes.string,\r\n    largeImageURL: propTypes.string,\r\n    modalFn: propTypes.func,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li className=\"ImageGalleryItem\">\r\n        <img\r\n          onClick={(e) => {\r\n            this.props.modalFn(e.target.attributes[2].value);\r\n            console.log(e);\r\n          }}\r\n          src={this.props.imageLink}\r\n          alt={this.props.imageAlt}\r\n          data-large={this.props.largeImageURL}\r\n          className=\"ImageGalleryItem-image\"\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageGalleryItem;\r\n","import React, { Component } from \"react\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\r\nimport propTypes from \"prop-types\";\r\nclass ImageGallery extends Component {\r\n  static defaultProps = { imagesArray: propTypes.array };\r\n  static propTypes = {\r\n    loader: propTypes.func,\r\n    imagesArray: propTypes.array,\r\n    modalFn: propTypes.func,\r\n  };\r\n  componentDidMount() {\r\n    this.props.loader(true);\r\n  }\r\n  render() {\r\n    return (\r\n      <ul className=\"ImageGallery\">\r\n        {this.props.imagesArray.map(\r\n          ({ id, webformatURL, tags, largeImageURL }) => {\r\n            return (\r\n              <ImageGalleryItem\r\n                key={id}\r\n                imageLink={webformatURL}\r\n                imagAlt={tags}\r\n                largeImageURL={largeImageURL}\r\n                modalFn={this.props.modalFn}\r\n              />\r\n            );\r\n          }\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nexport default ImageGallery;\r\n","import React, { Component } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nclass Button extends Component {\r\n  static propTypes = { fn: propTypes.func };\r\n\r\n  render() {\r\n    return (\r\n      <button className=\"Button\" type=\"button\" onClick={() => this.props.fn()}>\r\n        Load more\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nclass Modal extends Component {\r\n  static propTypes = { closeFn: propTypes.func, loader: propTypes.func };\r\n\r\n  componentDidMount() {\r\n    console.log(\"Modal componentdidMount\");\r\n    window.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = (event) => {\r\n    if (event.code === \"Escape\") {\r\n      this.props.closeFn();\r\n    }\r\n  };\r\n  handleBackdrop = (event) => {\r\n    if (event.currentTarget === event.target) {\r\n      this.props.closeFn();\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    console.log(\" Modal componentWillUnmount\");\r\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  render() {\r\n    return createPortal(\r\n      <div className=\"Overlay\" onClick={this.handleBackdrop}>\r\n        <div className=\"Modal\">{this.props.children}</div>\r\n      </div>,\r\n      modalRoot\r\n    );\r\n  }\r\n}\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport * as API from \"./Api/FetchService\";\nimport Searchbar from \"./Components/Searchbar\";\nimport ImageGallery from \"./Components//ImageGallery/ImageGallery\";\nimport Button from \"./Components/Button\";\nimport Modal from \"./Components/Modal\";\nexport default function App() {\n  const [searchWords, setSearchWords] = useState(\"\");\n  const [images, setImages] = useState([]);\n  const [showModal, setModal] = useState(false);\n  const [modalImage, setModalItem] = useState(\"\");\n  const [showLoader, setShowLoader] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const toggleModal = () => {\n    setModal(!showModal);\n  };\n  const setModalImage = (linkImg) => {\n    return setModalItem(linkImg);\n  };\n  const openLargeImage = (linkImg) => {\n    setModalImage(linkImg);\n    toggleModal();\n  };\n  const loaderToggle = (bool) => {\n    return setShowLoader(bool);\n  };\n  const getImages = (words, page) => {\n    loaderToggle(true);\n    API.get(words, page)\n      .then((response) => {\n        loaderToggle(false);\n        const imagesFromResponse = response.data.hits;\n        setImages((prevState) => [...prevState, ...imagesFromResponse]);\n        setCurrentPage((prevState) => prevState + 1);\n      })\n      .finally(() => {\n        if (currentPage > 2) {\n          window.scrollTo({\n            top: document.documentElement.scrollHeight,\n            behavior: \"smooth\",\n          });\n        }\n      });\n  };\n  const searchFormSubmit = (event) => {\n    event.preventDefault();\n    setImages([]);\n    const searchWordsValue = event.target[1].value;\n    setSearchWords(searchWordsValue);\n    const page = 1;\n    getImages(searchWordsValue, page);\n    event.target.reset();\n  };\n  const loadMoreFn = () => {\n    loaderToggle(true);\n    getImages(searchWords, currentPage);\n  };\n  return (\n    <div className=\"App\">\n      {showModal && (\n        <Modal closeFn={toggleModal} loader={loaderToggle}>\n          <img src={modalImage} alt=\"modal\" />\n        </Modal>\n      )}\n      <Searchbar onSubmit={searchFormSubmit} />\n      {searchWords !== \"\" && (\n        <ImageGallery\n          loader={loaderToggle}\n          imagesArray={images}\n          modalFn={openLargeImage}\n        ></ImageGallery>\n      )}\n      {showLoader && <Loader />}\n      {searchWords !== \"\" && <Button fn={loadMoreFn} />}\n    </div>\n  );\n}\n","import axios from \"axios\";\r\n\r\nconst API_BASIC_URL = \"https://pixabay.com/api/\";\r\nconst API_KEY = \"22486349-475ac57b79bf68bd3ecb1002b\";\r\nconst TYPE = \"photo\";\r\nconst ORIENTATION = \"horizontal\";\r\nconst PERPAGE = 12;\r\n\r\nexport const get = (words, page) => {\r\n  return axios.get(\r\n    `${API_BASIC_URL}?key=${API_KEY}&q=${words}&image_type=${TYPE}&page=${page}&orientation=${ORIENTATION}&per_page=${PERPAGE}`\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../src/styles.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}